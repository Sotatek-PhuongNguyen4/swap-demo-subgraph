// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AddLiquidity extends ethereum.Event {
  get params(): AddLiquidity__Params {
    return new AddLiquidity__Params(this);
  }
}

export class AddLiquidity__Params {
  _event: AddLiquidity;

  constructor(event: AddLiquidity) {
    this._event = event;
  }

  get player(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenA(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenB(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amountA(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get amountB(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class OwnerChanged extends ethereum.Event {
  get params(): OwnerChanged__Params {
    return new OwnerChanged__Params(this);
  }
}

export class OwnerChanged__Params {
  _event: OwnerChanged;

  constructor(event: OwnerChanged) {
    this._event = event;
  }

  get _oldOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class RemoveLiquidity extends ethereum.Event {
  get params(): RemoveLiquidity__Params {
    return new RemoveLiquidity__Params(this);
  }
}

export class RemoveLiquidity__Params {
  _event: RemoveLiquidity;

  constructor(event: RemoveLiquidity) {
    this._event = event;
  }

  get player(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenA(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenB(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amountA(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get amountB(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class SwapToken extends ethereum.Event {
  get params(): SwapToken__Params {
    return new SwapToken__Params(this);
  }
}

export class SwapToken__Params {
  _event: SwapToken;

  constructor(event: SwapToken) {
    this._event = event;
  }

  get receiver(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get fromToken(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get toToken(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get inAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get outAmount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class SwapContract__addLiquidityResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class SwapContract__getReservesResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class SwapContract__removeLiquidityResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class SwapContract__removeLiquidityETHResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class SwapContract extends ethereum.SmartContract {
  static bind(address: Address): SwapContract {
    return new SwapContract("SwapContract", address);
  }

  CONFIG(): Address {
    let result = super.call("CONFIG", "CONFIG():(address)", []);

    return result[0].toAddress();
  }

  try_CONFIG(): ethereum.CallResult<Address> {
    let result = super.tryCall("CONFIG", "CONFIG():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  FACTORY(): Address {
    let result = super.call("FACTORY", "FACTORY():(address)", []);

    return result[0].toAddress();
  }

  try_FACTORY(): ethereum.CallResult<Address> {
    let result = super.tryCall("FACTORY", "FACTORY():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  GOVERNANCE(): Address {
    let result = super.call("GOVERNANCE", "GOVERNANCE():(address)", []);

    return result[0].toAddress();
  }

  try_GOVERNANCE(): ethereum.CallResult<Address> {
    let result = super.tryCall("GOVERNANCE", "GOVERNANCE():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  PERCENT_DENOMINATOR(): BigInt {
    let result = super.call(
      "PERCENT_DENOMINATOR",
      "PERCENT_DENOMINATOR():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_PERCENT_DENOMINATOR(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "PERCENT_DENOMINATOR",
      "PERCENT_DENOMINATOR():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  POOL(): Address {
    let result = super.call("POOL", "POOL():(address)", []);

    return result[0].toAddress();
  }

  try_POOL(): ethereum.CallResult<Address> {
    let result = super.tryCall("POOL", "POOL():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  TOMI(): Address {
    let result = super.call("TOMI", "TOMI():(address)", []);

    return result[0].toAddress();
  }

  try_TOMI(): ethereum.CallResult<Address> {
    let result = super.tryCall("TOMI", "TOMI():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  TRANSFER_LISTENER(): Address {
    let result = super.call(
      "TRANSFER_LISTENER",
      "TRANSFER_LISTENER():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_TRANSFER_LISTENER(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "TRANSFER_LISTENER",
      "TRANSFER_LISTENER():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  WETH(): Address {
    let result = super.call("WETH", "WETH():(address)", []);

    return result[0].toAddress();
  }

  try_WETH(): ethereum.CallResult<Address> {
    let result = super.tryCall("WETH", "WETH():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  addLiquidity(
    tokenA: Address,
    tokenB: Address,
    amountA: BigInt,
    amountB: BigInt,
    amountAMin: BigInt,
    amountBMin: BigInt,
    deadline: BigInt
  ): SwapContract__addLiquidityResult {
    let result = super.call(
      "addLiquidity",
      "addLiquidity(address,address,uint256,uint256,uint256,uint256,uint256):(uint256,uint256,uint256)",
      [
        ethereum.Value.fromAddress(tokenA),
        ethereum.Value.fromAddress(tokenB),
        ethereum.Value.fromUnsignedBigInt(amountA),
        ethereum.Value.fromUnsignedBigInt(amountB),
        ethereum.Value.fromUnsignedBigInt(amountAMin),
        ethereum.Value.fromUnsignedBigInt(amountBMin),
        ethereum.Value.fromUnsignedBigInt(deadline)
      ]
    );

    return new SwapContract__addLiquidityResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_addLiquidity(
    tokenA: Address,
    tokenB: Address,
    amountA: BigInt,
    amountB: BigInt,
    amountAMin: BigInt,
    amountBMin: BigInt,
    deadline: BigInt
  ): ethereum.CallResult<SwapContract__addLiquidityResult> {
    let result = super.tryCall(
      "addLiquidity",
      "addLiquidity(address,address,uint256,uint256,uint256,uint256,uint256):(uint256,uint256,uint256)",
      [
        ethereum.Value.fromAddress(tokenA),
        ethereum.Value.fromAddress(tokenB),
        ethereum.Value.fromUnsignedBigInt(amountA),
        ethereum.Value.fromUnsignedBigInt(amountB),
        ethereum.Value.fromUnsignedBigInt(amountAMin),
        ethereum.Value.fromUnsignedBigInt(amountBMin),
        ethereum.Value.fromUnsignedBigInt(deadline)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new SwapContract__addLiquidityResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  checkPath(_path: Address, _paths: Array<Address>): boolean {
    let result = super.call(
      "checkPath",
      "checkPath(address,address[]):(bool)",
      [
        ethereum.Value.fromAddress(_path),
        ethereum.Value.fromAddressArray(_paths)
      ]
    );

    return result[0].toBoolean();
  }

  try_checkPath(
    _path: Address,
    _paths: Array<Address>
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "checkPath",
      "checkPath(address,address[]):(bool)",
      [
        ethereum.Value.fromAddress(_path),
        ethereum.Value.fromAddressArray(_paths)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  existPair(tokenA: Address, tokenB: Address): boolean {
    let result = super.call("existPair", "existPair(address,address):(bool)", [
      ethereum.Value.fromAddress(tokenA),
      ethereum.Value.fromAddress(tokenB)
    ]);

    return result[0].toBoolean();
  }

  try_existPair(
    tokenA: Address,
    tokenB: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "existPair",
      "existPair(address,address):(bool)",
      [ethereum.Value.fromAddress(tokenA), ethereum.Value.fromAddress(tokenB)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getAmountIn(
    amountOut: BigInt,
    reserveIn: BigInt,
    reserveOut: BigInt
  ): BigInt {
    let result = super.call(
      "getAmountIn",
      "getAmountIn(uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(amountOut),
        ethereum.Value.fromUnsignedBigInt(reserveIn),
        ethereum.Value.fromUnsignedBigInt(reserveOut)
      ]
    );

    return result[0].toBigInt();
  }

  try_getAmountIn(
    amountOut: BigInt,
    reserveIn: BigInt,
    reserveOut: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getAmountIn",
      "getAmountIn(uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(amountOut),
        ethereum.Value.fromUnsignedBigInt(reserveIn),
        ethereum.Value.fromUnsignedBigInt(reserveOut)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAmountOut(
    amountIn: BigInt,
    reserveIn: BigInt,
    reserveOut: BigInt
  ): BigInt {
    let result = super.call(
      "getAmountOut",
      "getAmountOut(uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(amountIn),
        ethereum.Value.fromUnsignedBigInt(reserveIn),
        ethereum.Value.fromUnsignedBigInt(reserveOut)
      ]
    );

    return result[0].toBigInt();
  }

  try_getAmountOut(
    amountIn: BigInt,
    reserveIn: BigInt,
    reserveOut: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getAmountOut",
      "getAmountOut(uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(amountIn),
        ethereum.Value.fromUnsignedBigInt(reserveIn),
        ethereum.Value.fromUnsignedBigInt(reserveOut)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAmountsIn(amountOut: BigInt, path: Array<Address>): Array<BigInt> {
    let result = super.call(
      "getAmountsIn",
      "getAmountsIn(uint256,address[]):(uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(amountOut),
        ethereum.Value.fromAddressArray(path)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_getAmountsIn(
    amountOut: BigInt,
    path: Array<Address>
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getAmountsIn",
      "getAmountsIn(uint256,address[]):(uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(amountOut),
        ethereum.Value.fromAddressArray(path)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getAmountsOut(amountIn: BigInt, path: Array<Address>): Array<BigInt> {
    let result = super.call(
      "getAmountsOut",
      "getAmountsOut(uint256,address[]):(uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(amountIn),
        ethereum.Value.fromAddressArray(path)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_getAmountsOut(
    amountIn: BigInt,
    path: Array<Address>
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getAmountsOut",
      "getAmountsOut(uint256,address[]):(uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(amountIn),
        ethereum.Value.fromAddressArray(path)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getReserves(
    tokenA: Address,
    tokenB: Address
  ): SwapContract__getReservesResult {
    let result = super.call(
      "getReserves",
      "getReserves(address,address):(uint256,uint256)",
      [ethereum.Value.fromAddress(tokenA), ethereum.Value.fromAddress(tokenB)]
    );

    return new SwapContract__getReservesResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getReserves(
    tokenA: Address,
    tokenB: Address
  ): ethereum.CallResult<SwapContract__getReservesResult> {
    let result = super.tryCall(
      "getReserves",
      "getReserves(address,address):(uint256,uint256)",
      [ethereum.Value.fromAddress(tokenA), ethereum.Value.fromAddress(tokenB)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new SwapContract__getReservesResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  isPause(): boolean {
    let result = super.call("isPause", "isPause():(bool)", []);

    return result[0].toBoolean();
  }

  try_isPause(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isPause", "isPause():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  pairFor(tokenA: Address, tokenB: Address): Address {
    let result = super.call("pairFor", "pairFor(address,address):(address)", [
      ethereum.Value.fromAddress(tokenA),
      ethereum.Value.fromAddress(tokenB)
    ]);

    return result[0].toAddress();
  }

  try_pairFor(tokenA: Address, tokenB: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "pairFor",
      "pairFor(address,address):(address)",
      [ethereum.Value.fromAddress(tokenA), ethereum.Value.fromAddress(tokenB)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  removeLiquidity(
    tokenA: Address,
    tokenB: Address,
    liquidity: BigInt,
    amountAMin: BigInt,
    amountBMin: BigInt,
    to: Address,
    deadline: BigInt
  ): SwapContract__removeLiquidityResult {
    let result = super.call(
      "removeLiquidity",
      "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(tokenA),
        ethereum.Value.fromAddress(tokenB),
        ethereum.Value.fromUnsignedBigInt(liquidity),
        ethereum.Value.fromUnsignedBigInt(amountAMin),
        ethereum.Value.fromUnsignedBigInt(amountBMin),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(deadline)
      ]
    );

    return new SwapContract__removeLiquidityResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_removeLiquidity(
    tokenA: Address,
    tokenB: Address,
    liquidity: BigInt,
    amountAMin: BigInt,
    amountBMin: BigInt,
    to: Address,
    deadline: BigInt
  ): ethereum.CallResult<SwapContract__removeLiquidityResult> {
    let result = super.tryCall(
      "removeLiquidity",
      "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(tokenA),
        ethereum.Value.fromAddress(tokenB),
        ethereum.Value.fromUnsignedBigInt(liquidity),
        ethereum.Value.fromUnsignedBigInt(amountAMin),
        ethereum.Value.fromUnsignedBigInt(amountBMin),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(deadline)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new SwapContract__removeLiquidityResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  removeLiquidityETH(
    token: Address,
    liquidity: BigInt,
    amountTokenMin: BigInt,
    amountETHMin: BigInt,
    to: Address,
    deadline: BigInt
  ): SwapContract__removeLiquidityETHResult {
    let result = super.call(
      "removeLiquidityETH",
      "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromUnsignedBigInt(liquidity),
        ethereum.Value.fromUnsignedBigInt(amountTokenMin),
        ethereum.Value.fromUnsignedBigInt(amountETHMin),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(deadline)
      ]
    );

    return new SwapContract__removeLiquidityETHResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_removeLiquidityETH(
    token: Address,
    liquidity: BigInt,
    amountTokenMin: BigInt,
    amountETHMin: BigInt,
    to: Address,
    deadline: BigInt
  ): ethereum.CallResult<SwapContract__removeLiquidityETHResult> {
    let result = super.tryCall(
      "removeLiquidityETH",
      "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromUnsignedBigInt(liquidity),
        ethereum.Value.fromUnsignedBigInt(amountTokenMin),
        ethereum.Value.fromUnsignedBigInt(amountETHMin),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(deadline)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new SwapContract__removeLiquidityETHResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  swapExactTokensForETH(
    amountIn: BigInt,
    amountOutMin: BigInt,
    path: Array<Address>,
    to: Address,
    deadline: BigInt
  ): Array<BigInt> {
    let result = super.call(
      "swapExactTokensForETH",
      "swapExactTokensForETH(uint256,uint256,address[],address,uint256):(uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(amountIn),
        ethereum.Value.fromUnsignedBigInt(amountOutMin),
        ethereum.Value.fromAddressArray(path),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(deadline)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_swapExactTokensForETH(
    amountIn: BigInt,
    amountOutMin: BigInt,
    path: Array<Address>,
    to: Address,
    deadline: BigInt
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "swapExactTokensForETH",
      "swapExactTokensForETH(uint256,uint256,address[],address,uint256):(uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(amountIn),
        ethereum.Value.fromUnsignedBigInt(amountOutMin),
        ethereum.Value.fromAddressArray(path),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(deadline)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  swapExactTokensForTokens(
    amountIn: BigInt,
    amountOutMin: BigInt,
    path: Array<Address>,
    to: Address,
    deadline: BigInt
  ): Array<BigInt> {
    let result = super.call(
      "swapExactTokensForTokens",
      "swapExactTokensForTokens(uint256,uint256,address[],address,uint256):(uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(amountIn),
        ethereum.Value.fromUnsignedBigInt(amountOutMin),
        ethereum.Value.fromAddressArray(path),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(deadline)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_swapExactTokensForTokens(
    amountIn: BigInt,
    amountOutMin: BigInt,
    path: Array<Address>,
    to: Address,
    deadline: BigInt
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "swapExactTokensForTokens",
      "swapExactTokensForTokens(uint256,uint256,address[],address,uint256):(uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(amountIn),
        ethereum.Value.fromUnsignedBigInt(amountOutMin),
        ethereum.Value.fromAddressArray(path),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(deadline)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  swapPrecondition(token: Address): boolean {
    let result = super.call(
      "swapPrecondition",
      "swapPrecondition(address):(bool)",
      [ethereum.Value.fromAddress(token)]
    );

    return result[0].toBoolean();
  }

  try_swapPrecondition(token: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "swapPrecondition",
      "swapPrecondition(address):(bool)",
      [ethereum.Value.fromAddress(token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  swapTokensForExactETH(
    amountOut: BigInt,
    amountInMax: BigInt,
    path: Array<Address>,
    to: Address,
    deadline: BigInt
  ): Array<BigInt> {
    let result = super.call(
      "swapTokensForExactETH",
      "swapTokensForExactETH(uint256,uint256,address[],address,uint256):(uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(amountOut),
        ethereum.Value.fromUnsignedBigInt(amountInMax),
        ethereum.Value.fromAddressArray(path),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(deadline)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_swapTokensForExactETH(
    amountOut: BigInt,
    amountInMax: BigInt,
    path: Array<Address>,
    to: Address,
    deadline: BigInt
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "swapTokensForExactETH",
      "swapTokensForExactETH(uint256,uint256,address[],address,uint256):(uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(amountOut),
        ethereum.Value.fromUnsignedBigInt(amountInMax),
        ethereum.Value.fromAddressArray(path),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(deadline)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  swapTokensForExactTokens(
    amountOut: BigInt,
    amountInMax: BigInt,
    path: Array<Address>,
    to: Address,
    deadline: BigInt
  ): Array<BigInt> {
    let result = super.call(
      "swapTokensForExactTokens",
      "swapTokensForExactTokens(uint256,uint256,address[],address,uint256):(uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(amountOut),
        ethereum.Value.fromUnsignedBigInt(amountInMax),
        ethereum.Value.fromAddressArray(path),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(deadline)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_swapTokensForExactTokens(
    amountOut: BigInt,
    amountInMax: BigInt,
    path: Array<Address>,
    to: Address,
    deadline: BigInt
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "swapTokensForExactTokens",
      "swapTokensForExactTokens(uint256,uint256,address[],address,uint256):(uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(amountOut),
        ethereum.Value.fromUnsignedBigInt(amountInMax),
        ethereum.Value.fromAddressArray(path),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(deadline)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  version(): BigInt {
    let result = super.call("version", "version():(uint256)", []);

    return result[0].toBigInt();
  }

  try_version(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("version", "version():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class AddLiquidityCall extends ethereum.Call {
  get inputs(): AddLiquidityCall__Inputs {
    return new AddLiquidityCall__Inputs(this);
  }

  get outputs(): AddLiquidityCall__Outputs {
    return new AddLiquidityCall__Outputs(this);
  }
}

export class AddLiquidityCall__Inputs {
  _call: AddLiquidityCall;

  constructor(call: AddLiquidityCall) {
    this._call = call;
  }

  get tokenA(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenB(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amountA(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get amountB(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get amountAMin(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get amountBMin(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get deadline(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }
}

export class AddLiquidityCall__Outputs {
  _call: AddLiquidityCall;

  constructor(call: AddLiquidityCall) {
    this._call = call;
  }

  get _amountA(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get _amountB(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }

  get _liquidity(): BigInt {
    return this._call.outputValues[2].value.toBigInt();
  }
}

export class AddLiquidityETHCall extends ethereum.Call {
  get inputs(): AddLiquidityETHCall__Inputs {
    return new AddLiquidityETHCall__Inputs(this);
  }

  get outputs(): AddLiquidityETHCall__Outputs {
    return new AddLiquidityETHCall__Outputs(this);
  }
}

export class AddLiquidityETHCall__Inputs {
  _call: AddLiquidityETHCall;

  constructor(call: AddLiquidityETHCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amountTokenDesired(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get amountTokenMin(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get amountETHMin(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get deadline(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class AddLiquidityETHCall__Outputs {
  _call: AddLiquidityETHCall;

  constructor(call: AddLiquidityETHCall) {
    this._call = call;
  }

  get amountToken(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get amountETH(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }

  get liquidity(): BigInt {
    return this._call.outputValues[2].value.toBigInt();
  }
}

export class ChangeOwnerCall extends ethereum.Call {
  get inputs(): ChangeOwnerCall__Inputs {
    return new ChangeOwnerCall__Inputs(this);
  }

  get outputs(): ChangeOwnerCall__Outputs {
    return new ChangeOwnerCall__Outputs(this);
  }
}

export class ChangeOwnerCall__Inputs {
  _call: ChangeOwnerCall;

  constructor(call: ChangeOwnerCall) {
    this._call = call;
  }

  get _newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ChangeOwnerCall__Outputs {
  _call: ChangeOwnerCall;

  constructor(call: ChangeOwnerCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _TOMI(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _CONFIG(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _FACTORY(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _WETH(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _GOVERNANCE(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get _TRANSFER_LISTENER(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get _POOL(): Address {
    return this._call.inputValues[6].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class MigrateLiquidityCall extends ethereum.Call {
  get inputs(): MigrateLiquidityCall__Inputs {
    return new MigrateLiquidityCall__Inputs(this);
  }

  get outputs(): MigrateLiquidityCall__Outputs {
    return new MigrateLiquidityCall__Outputs(this);
  }
}

export class MigrateLiquidityCall__Inputs {
  _call: MigrateLiquidityCall;

  constructor(call: MigrateLiquidityCall) {
    this._call = call;
  }

  get pair(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenA(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenB(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get users(): Array<Address> {
    return this._call.inputValues[3].value.toAddressArray();
  }
}

export class MigrateLiquidityCall__Outputs {
  _call: MigrateLiquidityCall;

  constructor(call: MigrateLiquidityCall) {
    this._call = call;
  }
}

export class PauseCall extends ethereum.Call {
  get inputs(): PauseCall__Inputs {
    return new PauseCall__Inputs(this);
  }

  get outputs(): PauseCall__Outputs {
    return new PauseCall__Outputs(this);
  }
}

export class PauseCall__Inputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PauseCall__Outputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class RemoveLiquidityCall extends ethereum.Call {
  get inputs(): RemoveLiquidityCall__Inputs {
    return new RemoveLiquidityCall__Inputs(this);
  }

  get outputs(): RemoveLiquidityCall__Outputs {
    return new RemoveLiquidityCall__Outputs(this);
  }
}

export class RemoveLiquidityCall__Inputs {
  _call: RemoveLiquidityCall;

  constructor(call: RemoveLiquidityCall) {
    this._call = call;
  }

  get tokenA(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenB(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get liquidity(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get amountAMin(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get amountBMin(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get to(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get deadline(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }
}

export class RemoveLiquidityCall__Outputs {
  _call: RemoveLiquidityCall;

  constructor(call: RemoveLiquidityCall) {
    this._call = call;
  }

  get amountA(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get amountB(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class RemoveLiquidityETHCall extends ethereum.Call {
  get inputs(): RemoveLiquidityETHCall__Inputs {
    return new RemoveLiquidityETHCall__Inputs(this);
  }

  get outputs(): RemoveLiquidityETHCall__Outputs {
    return new RemoveLiquidityETHCall__Outputs(this);
  }
}

export class RemoveLiquidityETHCall__Inputs {
  _call: RemoveLiquidityETHCall;

  constructor(call: RemoveLiquidityETHCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get liquidity(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get amountTokenMin(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get amountETHMin(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get to(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get deadline(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class RemoveLiquidityETHCall__Outputs {
  _call: RemoveLiquidityETHCall;

  constructor(call: RemoveLiquidityETHCall) {
    this._call = call;
  }

  get amountToken(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get amountETH(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class ResumeCall extends ethereum.Call {
  get inputs(): ResumeCall__Inputs {
    return new ResumeCall__Inputs(this);
  }

  get outputs(): ResumeCall__Outputs {
    return new ResumeCall__Outputs(this);
  }
}

export class ResumeCall__Inputs {
  _call: ResumeCall;

  constructor(call: ResumeCall) {
    this._call = call;
  }
}

export class ResumeCall__Outputs {
  _call: ResumeCall;

  constructor(call: ResumeCall) {
    this._call = call;
  }
}

export class SwapETHForExactTokensCall extends ethereum.Call {
  get inputs(): SwapETHForExactTokensCall__Inputs {
    return new SwapETHForExactTokensCall__Inputs(this);
  }

  get outputs(): SwapETHForExactTokensCall__Outputs {
    return new SwapETHForExactTokensCall__Outputs(this);
  }
}

export class SwapETHForExactTokensCall__Inputs {
  _call: SwapETHForExactTokensCall;

  constructor(call: SwapETHForExactTokensCall) {
    this._call = call;
  }

  get amountOut(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get path(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }

  get to(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get deadline(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class SwapETHForExactTokensCall__Outputs {
  _call: SwapETHForExactTokensCall;

  constructor(call: SwapETHForExactTokensCall) {
    this._call = call;
  }

  get amounts(): Array<BigInt> {
    return this._call.outputValues[0].value.toBigIntArray();
  }
}

export class SwapExactETHForTokensCall extends ethereum.Call {
  get inputs(): SwapExactETHForTokensCall__Inputs {
    return new SwapExactETHForTokensCall__Inputs(this);
  }

  get outputs(): SwapExactETHForTokensCall__Outputs {
    return new SwapExactETHForTokensCall__Outputs(this);
  }
}

export class SwapExactETHForTokensCall__Inputs {
  _call: SwapExactETHForTokensCall;

  constructor(call: SwapExactETHForTokensCall) {
    this._call = call;
  }

  get amountOutMin(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get path(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }

  get to(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get deadline(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class SwapExactETHForTokensCall__Outputs {
  _call: SwapExactETHForTokensCall;

  constructor(call: SwapExactETHForTokensCall) {
    this._call = call;
  }

  get amounts(): Array<BigInt> {
    return this._call.outputValues[0].value.toBigIntArray();
  }
}

export class SwapExactTokensForETHCall extends ethereum.Call {
  get inputs(): SwapExactTokensForETHCall__Inputs {
    return new SwapExactTokensForETHCall__Inputs(this);
  }

  get outputs(): SwapExactTokensForETHCall__Outputs {
    return new SwapExactTokensForETHCall__Outputs(this);
  }
}

export class SwapExactTokensForETHCall__Inputs {
  _call: SwapExactTokensForETHCall;

  constructor(call: SwapExactTokensForETHCall) {
    this._call = call;
  }

  get amountIn(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amountOutMin(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get path(): Array<Address> {
    return this._call.inputValues[2].value.toAddressArray();
  }

  get to(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get deadline(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class SwapExactTokensForETHCall__Outputs {
  _call: SwapExactTokensForETHCall;

  constructor(call: SwapExactTokensForETHCall) {
    this._call = call;
  }

  get amounts(): Array<BigInt> {
    return this._call.outputValues[0].value.toBigIntArray();
  }
}

export class SwapExactTokensForTokensCall extends ethereum.Call {
  get inputs(): SwapExactTokensForTokensCall__Inputs {
    return new SwapExactTokensForTokensCall__Inputs(this);
  }

  get outputs(): SwapExactTokensForTokensCall__Outputs {
    return new SwapExactTokensForTokensCall__Outputs(this);
  }
}

export class SwapExactTokensForTokensCall__Inputs {
  _call: SwapExactTokensForTokensCall;

  constructor(call: SwapExactTokensForTokensCall) {
    this._call = call;
  }

  get amountIn(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amountOutMin(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get path(): Array<Address> {
    return this._call.inputValues[2].value.toAddressArray();
  }

  get to(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get deadline(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class SwapExactTokensForTokensCall__Outputs {
  _call: SwapExactTokensForTokensCall;

  constructor(call: SwapExactTokensForTokensCall) {
    this._call = call;
  }

  get amounts(): Array<BigInt> {
    return this._call.outputValues[0].value.toBigIntArray();
  }
}

export class SwapTokensForExactETHCall extends ethereum.Call {
  get inputs(): SwapTokensForExactETHCall__Inputs {
    return new SwapTokensForExactETHCall__Inputs(this);
  }

  get outputs(): SwapTokensForExactETHCall__Outputs {
    return new SwapTokensForExactETHCall__Outputs(this);
  }
}

export class SwapTokensForExactETHCall__Inputs {
  _call: SwapTokensForExactETHCall;

  constructor(call: SwapTokensForExactETHCall) {
    this._call = call;
  }

  get amountOut(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amountInMax(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get path(): Array<Address> {
    return this._call.inputValues[2].value.toAddressArray();
  }

  get to(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get deadline(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class SwapTokensForExactETHCall__Outputs {
  _call: SwapTokensForExactETHCall;

  constructor(call: SwapTokensForExactETHCall) {
    this._call = call;
  }

  get amounts(): Array<BigInt> {
    return this._call.outputValues[0].value.toBigIntArray();
  }
}

export class SwapTokensForExactTokensCall extends ethereum.Call {
  get inputs(): SwapTokensForExactTokensCall__Inputs {
    return new SwapTokensForExactTokensCall__Inputs(this);
  }

  get outputs(): SwapTokensForExactTokensCall__Outputs {
    return new SwapTokensForExactTokensCall__Outputs(this);
  }
}

export class SwapTokensForExactTokensCall__Inputs {
  _call: SwapTokensForExactTokensCall;

  constructor(call: SwapTokensForExactTokensCall) {
    this._call = call;
  }

  get amountOut(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amountInMax(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get path(): Array<Address> {
    return this._call.inputValues[2].value.toAddressArray();
  }

  get to(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get deadline(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class SwapTokensForExactTokensCall__Outputs {
  _call: SwapTokensForExactTokensCall;

  constructor(call: SwapTokensForExactTokensCall) {
    this._call = call;
  }

  get amounts(): Array<BigInt> {
    return this._call.outputValues[0].value.toBigIntArray();
  }
}
