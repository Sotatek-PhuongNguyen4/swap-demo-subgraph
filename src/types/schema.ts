// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class ExampleEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("count", Value.fromBigInt(BigInt.zero()));
    this.set("player", Value.fromBytes(Bytes.empty()));
    this.set("tokenA", Value.fromBytes(Bytes.empty()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ExampleEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save ExampleEntity entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("ExampleEntity", id.toString(), this);
    }
  }

  static load(id: string): ExampleEntity | null {
    return changetype<ExampleEntity | null>(store.get("ExampleEntity", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get count(): BigInt {
    let value = this.get("count");
    return value!.toBigInt();
  }

  set count(value: BigInt) {
    this.set("count", Value.fromBigInt(value));
  }

  get player(): Bytes {
    let value = this.get("player");
    return value!.toBytes();
  }

  set player(value: Bytes) {
    this.set("player", Value.fromBytes(value));
  }

  get tokenA(): Bytes {
    let value = this.get("tokenA");
    return value!.toBytes();
  }

  set tokenA(value: Bytes) {
    this.set("tokenA", Value.fromBytes(value));
  }
}

export class SwapEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("receiver", Value.fromBytes(Bytes.empty()));
    this.set("inAmount", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("outAmount", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("date", Value.fromI32(0));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save SwapEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save SwapEntity entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("SwapEntity", id.toString(), this);
    }
  }

  static load(id: string): SwapEntity | null {
    return changetype<SwapEntity | null>(store.get("SwapEntity", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get receiver(): Bytes {
    let value = this.get("receiver");
    return value!.toBytes();
  }

  set receiver(value: Bytes) {
    this.set("receiver", Value.fromBytes(value));
  }

  get fromToken(): Bytes | null {
    let value = this.get("fromToken");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set fromToken(value: Bytes | null) {
    if (!value) {
      this.unset("fromToken");
    } else {
      this.set("fromToken", Value.fromBytes(<Bytes>value));
    }
  }

  get toToken(): Bytes | null {
    let value = this.get("toToken");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set toToken(value: Bytes | null) {
    if (!value) {
      this.unset("toToken");
    } else {
      this.set("toToken", Value.fromBytes(<Bytes>value));
    }
  }

  get inAmount(): BigDecimal {
    let value = this.get("inAmount");
    return value!.toBigDecimal();
  }

  set inAmount(value: BigDecimal) {
    this.set("inAmount", Value.fromBigDecimal(value));
  }

  get outAmount(): BigDecimal {
    let value = this.get("outAmount");
    return value!.toBigDecimal();
  }

  set outAmount(value: BigDecimal) {
    this.set("outAmount", Value.fromBigDecimal(value));
  }

  get date(): i32 {
    let value = this.get("date");
    return value!.toI32();
  }

  set date(value: i32) {
    this.set("date", Value.fromI32(value));
  }
}
